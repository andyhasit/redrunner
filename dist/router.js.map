{"version":3,"file":"router.js","sources":["../src/utils.js","../src/router.js","../src/view.js"],"sourcesContent":["const doc = document;\n\n/**\n * Some utility functions\n */\nexport const und = x => x === undefined\nexport const isStr = x => typeof x === 'string'\n\n/**\n * Creates and mounts a view onto an element.\n *\n * @param {unsure} elementOrId Either a string representing an id, or an\n *     element.\n * @param {class} cls The class of View to create\n * @param {object} props The props to pass to the view (optional)\n * @param {object} parent The parent view (optional)\n * @param {int} seq The sequence (optional)\n */\nexport function mount(elementOrId, cls, props, parent, seq) {\n  let view = createView(cls, props, parent, seq)\n  let target = isStr(elementOrId) ? doc.getElementById(elementOrId.slice(1)) : elementOrId\n  target.parentNode.replaceChild(view.root.e, target)\n  return view\n}\n\n/**\n * Creates a wrapper from an HTML string.\n */\nexport function wrap(html) {\n  let throwAway = document.createElement('template')\n  throwAway.innerHTML = html\n  return new Wrapper(throwAway.content.firstChild)\n}\n\n/**\n * Creates a wrapper of type tag and sets inner.\n * TODO: allow class in tag?\n */\nexport function h(tag, inner) {\n  return new Wrapper(document.createElement(tag)).inner(inner)\n}\n\n/**\n * Creates a view, builds its DOM, and updates it.\n *\n * @param {class} cls The class of View to create\n * @param {object} parent The parent view (optional)\n * @param {object} props The props to pass to the view (optional)\n * @param {int} seq The sequence (optional)\n */\nexport function createView(cls, props, parent, seq) {\n  let view = new cls(parent, props, seq)\n  view.__bv(view, wrap)\n  view.init()\n  view.update()\n  return view\n}\n\n/**\n * An object which caches and returns views of a same type.\n *\n@cls -- any valid subclass of View\n@cacheBy -- either:\n    <undefined> in which case the sequence is used as key*\n    A string used to lookup a property on the item. Can be dotted. e.g. 'user.id'\n    A function called with (props, seq) which must return a key\n*/\n\nexport class ViewCache {\n  /**\n   * @param {class} cls The class of View to create\n   * @param {object} parent The parent view (optional)\n   */\n  constructor(cls, view, keyFn) {\n    let defaultKeyFn = (props, seq) => seq\n    this.view = view\n    this.cls = cls\n    this.cache = {}\n    this.keyFn = keyFn || defaultKeyFn\n    this._seq = 0\n  }\n  reset() {\n    this._seq = 0\n  }\n  get(props) {\n    /*\n    Gets a view, potentially from cache\n    */\n    let view, key = this.keyFn(props, this._seq)\n    if (this.cache.hasOwnProperty(key)) {\n      view = this.cache[key]\n    } else {\n      view = createView(this.cls, props, this.view, this._seq)\n      this.cache[key] = view\n    }\n    view.update(props)\n    this._seq += 1\n    return view\n  }\n}\n\nexport class Wrapper {\n  constructor(element, view) {\n    this.e = element\n    this._c = undefined // The viewCache, if any\n    this._n = undefined //  \n    this.view = view\n  }\n  \n  // Methods which potentially change the containing view's nested views \n  append(item) {\n    return this._append(item)\n  }\n  _append(item) {\n    return this.e.appendChild(item.e)\n  }\n  child(item) {\n    this.clear()\n    return this._append(item)\n  }\n  replace(el) {\n    this.e.parentNode.replaceChild(el, this.e)\n  }\n  clear() {\n    if (this._n) {\n      this._n.length = 0\n    }\n    this.e.innerHTML = ''\n    this.e.textContent = ''\n    this.e.value = ''\n    return this\n  }\n  html(html) {\n    this.e.innerHTML = html\n    return this\n  }\n  inner(items) {\n    /*\n     * Use this for adding standard lists of items. Use items() is you used use()\n     */\n    if (!Array.isArray(items)) {\n      return this.child(items)\n    }\n    this._prepRepeat()\n    for (var i=0, il=items.length; i<il; i++) {\n      this._append(items[i])\n    }\n    return this._done()\n  }\n  items(items) {\n    this._prepRepeat()\n    let view\n    for (var i=0, il=items.length; i<il; i++) {\n      view = this._c.get(items[i])\n      this._nest(view)\n      this.e.appendChild(view.root.e)\n    }\n    return this._done()\n  }\n  _nest(view) {\n    //TODO: the idea of this it to keep track of nested views. Check it works...\n    if (!this._n) {\n      this._n = this.view.__nv\n    }\n    this._n.push(view)\n  }\n  _prepRepeat() {\n    this.visible(false)\n    this.clear()\n  }\n  _done() {\n    this.visible(true)\n    return this\n  }\n  use(cls) {\n    this._c = new ViewCache(cls, this)\n    return this\n  }\n  watch(desc, callback) {\n    /*\n     *   Watch a value and do something if it has changed.\n     * \n     *   This method has two forms.\n     * \n     *   If desc does not contain \":\" then the callback is simply called if the value \n     *   changes (during the view's update() call)\n     *\n     *   The callback parameters are (newVal, oldVal, wrapper) \n     *   E.g.\n     *\n     *      h('div').watch('clickCount', (n,o,w) => w.text(n))\n     *\n     *   If the desc contains \":\" (e.g. \"text:clickCount\") then we assume what is to \n     *   the left of : to be a method of the wrapper to call if the value has changed.\n     *   E.g.\n     *\n     *       h('div').watch('text:clickCount')  // equates to wrapper.text(newValue)\n     *   \n     *   In this form, a callback may be provided to transform the value before it is\n     *   used. Its parameters are (newVal, oldVal) \n     *   \n     *    E.g.\n     *\n     *       h('div').watch('text:clickCount', (n,o) => `Click count is ${n}`)\n     *   \n     */\n    let path, func, chunks = desc.split(':')\n    if (chunks.length === 1) {\n      path = chunks[0]\n      func = (n,o) => callback(n,o,this)\n    } else {\n      let method = chunks[0]\n      path = chunks[1]\n      func = und(callback) ? n => this[method](n) : (n,o) => this[method](callback(n,o,this)) \n    }\n    this.view.watch(path, func)\n    return this\n  }\n\n  // These methods are mostly simple DOM wrappers\n\n  get Value() {\n    /* Returns the value of the element */\n    return this.e.value\n  }\n  css(style) {\n    this.e.className = style\n    return this\n  }\n  cssAdd(style) {\n    this.e.classList.add(style)\n    return this\n  }\n  cssAddTrans(style) {\n    return this.transition(_ => this.e.classList.add(style))\n  }\n  cssRemove(style) {\n    this.e.classList.remove(style)\n    return this\n  }\n  cssRemoveTrans(style) {\n    return this.transition(_ => this.e.classList.remove(style))\n  }\n  cssToggle(style) {\n    this.e.classList.toggle(style)\n    return this\n  }\n  att(name, value) {\n    this.e.setAttribute(name, value)\n    return this\n  }\n  atts(atts) {\n    for (let name in atts) {\n      this.att(name, atts[name])\n    }\n    return this\n  }\n  checked(value) {\n    this.e.checked = value\n    return this\n  }\n  href(value) {\n    return this.att('href', value)\n  }\n  id(value) {\n    return this.att('id', value)\n  }\n  src(value) {\n    return this.att('src', value)\n  }\n  value(value) {\n    return this.att('value', value)\n  }\n  text(value) {\n    this.e.textContent = value\n    return this\n  }\n  on(event, callback) {\n    this.e.addEventListener(event, e => callback(e, this))\n    return this\n  }\n  style(name, value) {\n    this.e.style[name] = value\n    return this\n  }\n  transition(fn) {\n    return new Promise(resolve => {\n      fn()\n      let transitionEnded = e => {\n        this.e.removeEventListener('transitionend', transitionEnded)\n        resolve()\n      }\n    this.e.addEventListener('transitionend', transitionEnded)\n    })\n  }\n  visible(visible) {\n    return this.style('visibility', visible? 'visible' : 'hidden')\n  }\n}\n","import {View} from './view'\nimport {ViewCache, isStr} from './utils'\n\n/*\n * The defaultKeyFn for a route's ViewCache.\n * It returns 1, which causes the same view to be reused each time, which is most likely \n * what we want, but means the view should must be stateless.\n */\nconst defaultKeyFn = _ => 1\n\n/*\n * Router - an object responsible for managing routes\n\n -- how do we cache and update views?\n\nWhen a route is first activated, the view gets instantiated and we call update()\nWhen a route is reactivated, there are options:\n  - build a completely new view\n  - retrieve a cached view based on args\n  - always reuse the same view\n\nTodo:\n  change route to accept a cache - else it creates its own\n\n  this.cache()\n\nhttps://blog.pshrmn.com/entry/how-single-page-applications-work/\n\n\nparams vs vars\n*/\n\n\n/* RouterView\n * A view which responds to changes in the hash url.\n * Arg 'data' must be an object like {routes, resources}\n * \n * @data.routes: an array of objects which will get passed as arg 'config' to new Route()\n * @data.resources: an object representing load-once resources as name:function\n *   the function will be called with (this) and must return a promise.\n */\n\n\nexport class Router extends View {\n  init() {\n    let {routes, resources} = this.props\n    this._routes = routes.map(config => new Route(config))\n    this._resources = {}\n    if (resources) {\n      for (let [name, func] of Object.entries(resources)) {\n        this._resources[name] = {\n          loaded: false,\n          func: func\n        }\n      }\n    }\n    window.addEventListener('hashchange', e => this._hashChanged())\n    window.addEventListener('load', e => this._hashChanged())\n  }\n  /* \n   */\n  _resolveResources(resources) {\n    let promises = []\n    if (resources) {\n      resources.forEach(name => {\n        let resource = this._resources[name]\n        if (!resource.loaded) {\n          promises.push(resource.func(this))\n        }\n      })\n    }\n    return Promise.all(promises)\n  }\n  _hashChanged() {\n    let url = location.hash.slice(1) || '/';\n    this._matchRoute(url);\n  }\n  /*\n   * Tries to find a view based on url, and will build it\n   */\n  _matchRoute(url) {\n    let len = this._routes.length, matched=false;\n    for (let i=0; i<len; i++) {\n      let route = this._routes[i];\n      let routeData = route.match(url)\n      if (routeData) {\n        matched = true\n        this._resolveResources(route.resources).then(_ => {\n          route.getView(routeData).then(view => {\n            this.root.child(view.root)\n            // Use this? bubble?\n            // call back?\n            //this.app.emit('route_changed', {routeData, url, view})\n          })\n        })\n        break\n      }\n    }\n    if (!matched) {\n      throw new Error('Route not matched: ' + url)\n    }\n  }\n}\n\n/*\n * A route.\n * The path is used for matching and extracting args & params.\n * The path is made of chunks separated by \"/\" e.g. /todos/detail/{id}\n * Chunks are strings or argument descriptors\n * A url matches a route if all the string chunks match e.g.\n * Route path: /todos/detail/{id}\n * Urls:\n *   /todos/detail/001           (yes)\n *   /todos/detail/001?name=joe  (yes, as everything after ? are params)\n *   /todos/001/detail           (no, as chunk[1] != 'detail')\n *   /todos/detail/001/next      (no, as it has more chunks than expected)\n * \n * Config example: \n * {\n *   path: '/todos',\n *   resources: ['todos', 'settings'],\n *   cls: TodoView,\n *   keyFn: foo,            # optional used as cache arg for view\n *   resolve: foo,          # optional used to create data for view\n * }\n * \n * The path may specify params after ? (but all params are passed to the view anyway)\n *  /todos/detail?id,date\n * \n * Args and params may specify a type, in which case they are converted.\n * resolve gets called with (routeData, [this router]) and must return a promise, the return\n * value is passed as data to the view. routeData is {args, params, url}\n */\nexport class Route {\n  constructor(config) {\n    this.resources = config.resources\n    let paramStr, path = config.path;\n    this._vc = new ViewCache(config.cls, this, config.keyFn || defaultKeyFn);\n    [path, paramStr] = path.split('?')\n    this.chunks = this.buildChunks(path) // An array of string or RouteArg\n    this.params = this.buildParams(paramStr)\n    this.resolve = config.resolve || this.defautResolve\n  }\n  defautResolve(routeData) {\n    return Promise.resolve(routeData)\n  }\n  buildChunks(path) {\n    return path.split('/').map(s => {\n      if (s.startsWith('{')) {\n        return new RouteArg(s.slice(1,-1))\n      }\n      return s\n    })\n  }\n  buildParams(paramStr) {\n    let params = {}\n    if (paramStr) {\n      paramStr.split(',').forEach(s => {\n        let r = new RouteArg(s.trim());\n        params[r.name] = r;\n      })\n    }\n    return params\n  }\n  getView(routeData) {\n    return this.resolve(routeData, this).then(result => {return this._vc.get(result)})\n  }\n  match(url) {\n    let front, paramStr, definedChunkCount = this.chunks.length, args = {};\n    [front, ...paramStr] = url.split('?')\n    let foundChunks = front.split('/')\n    if (definedChunkCount !== foundChunks.length) {\n      return false\n    }\n    // determine if non interpreted chunks match.\n    for (let i=0; i<definedChunkCount; i++) {\n      let definedChunk = this.chunks[i]\n      let foundChunk = foundChunks[i]\n      if (definedChunk instanceof RouteArg) {\n        args[definedChunk.name] = _ => definedChunk.convert(foundChunk)\n      } else if (isStr(definedChunk) && definedChunk != foundChunk) {\n        return false\n      }\n    }\n    // If we reach here, url matches, so process args and params\n    for (let a in args) {\n      args[a] = args[a]()\n    }\n    // paramStr had to be an array in case multiple \"?\" in url\n    let params = {}\n    if (paramStr) {\n      paramStr.join('').split('&').forEach(e => {\n        let k, v;\n        [k,v] = e.split('=')\n        if (this.params.hasOwnProperty(k)) {\n          params[k] = this.params[k].convert(v)\n        } else {\n          params[k] = v\n        }\n      })\n    }\n    return {args, params, url}\n  }\n}\n\nexport class RouteArg {\n  constructor(str) {\n    // No error checks :-(\n    let name, conv;\n    [name, conv] = str.split(':')\n    this.name = name\n    switch (conv) {\n      case 'int':\n        this.conv = v => parseInt(v);\n        break;\n      case 'float':\n        this.conv = v => parseFloat(v);\n        break;\n      default:\n        this.conv = v => v;\n    }\n  }\n  convert(val) {\n    return this.conv(val)\n  }\n}\n","import {\n  createView,\n  und, \n  wrap, // Keep this, its used by babel\n  Wrapper\n} from './utils'\n\n/*\n * Public members:\n *\n *  nest    -- create a nested view\n *  debug   -- prints out debug info\n *  dom     -- an object containing all the saved wrappers\n *  emit    -- emit an event to be handled by a parent views\n *  handle  -- register a function to handle an event emitted by a nested view\n *  init    -- override to set initial state \n *  parent  -- the parent view\n *  props   -- the props passed to the view\n *  root    -- the root wrapper (should root even be a wrapper?)\n *  seq     -- the sequence\n *  update  -- method which gets called when a view is updated\n *  \n * Private members (for internal use) start with __ and are listed here:\n *\n *  __bv (BuildView)  -- is built by babel\n *  __ia (IsAttached)\n *  __gw (GetWrapper) -- returns a wrapper at a specific path\n *  __nv (NestedViews)\n *  __ov (OldValues)\n *  __rn (ReplaceNode)\n *  __un (Update Nested Views)\n *  __uw (Update Watches)\n *  __wc (Watcher Callbacks)\n *\n */\nexport class View {\n  constructor(parent, props, seq) {\n    let s = this\n    s.parent = parent       // The parent view\n    s.props = props         // The props passed to the view. May be changed\n    s.seq = seq             // The sequence - only for nested views\n    // Internal state objects\n    s.__nv = []         // Array of arrays of nested views\n\n    // These relate to watchers\n    s.__ov = {}       // The old values for watches to compare against  \n\n    // These will be set by __bv()\n    s.root = null           // the root wrapper, will be set by __bv\n    s.dom = null            // the named wrappers, will be set by __bv\n  }\n\n  /* This field gets transformed by the babel plugin.\n   * Providing a default here so that child classes get processed.\n   */\n  __html__ = '<div/>'\n\n  init() {\n    // Gets called once\n  }\n  update(props) {\n    /*  \n     *   The external call to update the view. \n     *   @props -- new props, else it keeps its old (which is fine)\n     */\n    if (!und(props)) {\n      this.props = props\n    }\n    this.__uw()\n    this.__un()\n  }\n  debug() {\n    c.log(this.__bv.toString())\n    let lines = []\n    lines.push('__wc: {')\n    for (let [name, callbacks] of Object.entries(this.__wc)) {\n      lines.push(`  \"${name}\": [`)\n      callbacks.forEach(e => lines.push('  ' + e.toString()))\n      lines.push('  ]')\n    }\n    lines.push('}')\n    c.log(lines.join('\\n'))\n  }\n  nest(cls, props, seq) {\n    /*\n     * Builds a nested view of the specified class. Its up to you how you attach it.\n     * No caching is used. Use a cache object returned by this.cache() if you need caching.\n     */\n    let child = createView(cls, props, this, seq)\n    this.__nv.push(child)\n    return child\n  }\n  emit(name, args) {\n    let target = this\n    while (!und(target)) {\n      let handlers = target._handlers_\n      if (name in handlers) {\n        return handlers[name].apply(target, args)\n      }\n      target = target.parent\n    }\n  }\n  old(name) {\n    return this.__ov[name]\n  }\n  watch(path, callback) {\n    /*\n    Watch a property and call the callback during update if it has changed.\n\n    @path -- A dotted path to the value\n\n      e.g. 'user.id'\n    \n    @callback -- a function to be called with (newValue, oldValue)\n    \n      e.g. (n,o) => alert(`Value changed from ${o} to ${n}`)\n\n    */\n    if (!this.__wc.hasOwnProperty(path)) {\n      this.__wc[path] = []\n    }\n    this.__wc[path].push(callback)\n    return this // Keep this because people may use it like on the wrapper.\n  }\n  __gw(path) {\n    /*\n    Returns a wrapper around element at path, where path is an array of indices.\n    This is used by the babel plugin.\n    */\n    let el = path.reduce((accumulator, index) => accumulator.childNodes[index], this.root.e)\n    return new Wrapper(el, this)\n  }\n  __un() {\n    this.__nv.forEach(child => {\n      if (child.__ia()) {\n         child.update()\n      }\n    })\n  }\n  __uw() {\n    /*\n     * Iterates through watches. If the value has changed, call callback.\n     */\n    let path, newValue, previousValue, callbacks\n    for (path in this.__wc) {\n      newValue = this.__wq[path].apply(this)\n      previousValue = this.__ov[path]\n      if (path === '' || previousValue !== newValue) {\n        callbacks = this.__wc[path]\n        for (var i=0, il=callbacks.length; i<il; i++) {\n          callbacks[i].apply(this, [newValue, previousValue])\n        }\n      }\n      this.__ov[path] = newValue\n    }\n  }\n  __rn(path, view) {\n    this.__gw(path).replace(view.root.e)\n  }\n  __ia() {\n    let el = this\n    // TODO: loop until parent\n    // let element = \n    // while (element != document && element.parentNode) {\n    //   /* jump to the parent element */\n    //   element = element.parentNode;\n    // }\n    return el.root.e.parentNode\n  }\n\n  /* Currently unused, but we may use it in future strategy\n   */\n  // _cloneNode_() {\n  //   let ct = this._ct_\n  //   if (!ct._template_) {\n  //     let throwAway = document.createElement('template')\n  //     // let tidy = raw.replace(/\\n/g, \"\")\n  //     //   .replace(/[\\t ]+\\</g, \"<\")\n  //     //   .replace(/\\>[\\t ]+\\</g, \"><\")\n  //     //   .replace(/\\>[\\t ]+$/g, \">\")\n  //     throwAway.innerHTML = ct.html.trim()\n  //     ct._template_ = throwAway.content.firstChild\n  //   }\n  //   return ct._template_.cloneNode(true)\n  // }\n}"],"names":["und","x","undefined","wrap","html","throwAway","document","createElement","innerHTML","Wrapper","content","firstChild","createView","cls","props","parent","seq","view","__bv","init","update","ViewCache","keyFn","this","cache","_seq","reset","get","key","hasOwnProperty","element","e","_c","_n","append","item","_append","appendChild","child","clear","replace","el","parentNode","replaceChild","length","textContent","value","inner","items","Array","isArray","_prepRepeat","i","il","_done","_nest","root","__nv","push","visible","use","watch","desc","callback","path","func","chunks","split","n","o","_this","method","css","style","className","cssAdd","classList","add","cssAddTrans","transition","_","_this2","cssRemove","remove","cssRemoveTrans","_this3","cssToggle","toggle","att","name","setAttribute","atts","checked","href","id","src","text","on","event","addEventListener","_this4","fn","Promise","resolve","_this5","transitionEnded","removeEventListener","defaultKeyFn","Router","resources","_routes","routes","map","config","Route","_resources","Object","entries","loaded","window","_hashChanged","_resolveResources","promises","forEach","resource","all","url","location","hash","slice","_matchRoute","len","matched","route","routeData","match","then","getView","Error","__html__","s","__ov","dom","__uw","__un","debug","c","log","toString","lines","__wc","callbacks","join","nest","emit","args","target","handlers","_handlers_","apply","old","__gw","reduce","accumulator","index","childNodes","__ia","newValue","previousValue","__wq","__rn","paramStr","_vc","buildChunks","params","buildParams","defautResolve","startsWith","RouteArg","r","trim","result","front","definedChunkCount","foundChunks","definedChunk","foundChunk","convert","a","k","v","str","conv","parseInt","parseFloat","val"],"mappings":"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"}